
#include <stdio.h>
#include <stdlib.h>

#include <NDS.h>

#include "emulator.h"
#include "_const.h"
#include "_console.h"
#include "filesys.h"
#include "memtool.h"
#include "unicode.h"
#include "mwin.h"
#include "glib/glib.h"
#include "inifile.h"

#include "thumb.h"

static int FileHandle=0;

static int ThumbCount;
static bool ThumbDrawed=false;

static u32 GetWStrCRC32Fast(const UnicodeChar *str)
{
  if(str==NULL) return(0);
  
  u32 CRC=0;
  
  while(*str!=0){
    UnicodeChar uc=*str++;
    if(((UnicodeChar)'a'<=uc)&&(uc<=(UnicodeChar)'z')) uc-=0x20;
    CRC^=(u32)uc;
    CRC=((CRC >> (32-8)) & 0x000000ff)+((CRC & 0x00ffffff) << 8);
  }
  
  if(CRC==0) CRC=1;
  
  return(CRC);
}

static bool isStrWEqual_CaseUnsence(const UnicodeChar *sw1,const UnicodeChar *sw2)
{
  if((sw1==0)&&(sw2==0)) return(true);
  if((sw1==0)||(sw2==0)) return(false);
  
  while(1){
    UnicodeChar uc1=*sw1;
    UnicodeChar uc2=*sw2;
    
    if(((UnicodeChar)'a'<=uc1)&&(uc1<=(UnicodeChar)'z')) uc1-=0x20;
    if(((UnicodeChar)'a'<=uc2)&&(uc2<=(UnicodeChar)'z')) uc2-=0x20;
    
    if((uc1==0)||(uc2==0)){
      if((uc1==0)&&(uc2==0)){
        return(true);
        }else{
        return(false);
      }
    }
    
    sw1++;
    sw2++;
  }
  
  return(false);
}

static u32 GetOffset(const u32 CRC,const UnicodeChar *FilenameW)
{
  u32 cnt=ThumbCount;
  
  FileSys_fseek(FileHandle,4,SEEK_SET);
  
  for(u32 idx=0;idx<cnt;idx++){
    u32 head[2];
    FileSys_fread(&head[0],4,2,FileHandle);
    if(head[0]==CRC){
      u32 ofs=FileSys_ftell(FileHandle);
      FileSys_fseek(FileHandle,head[1],SEEK_SET); // skip FilenameW length
      
      u32 fnwlen;
      FileSys_fread(&fnwlen,4,1,FileHandle);
      
      UnicodeChar fnw[256];
      if((256*2)<fnwlen) fnwlen=256*2;
      FileSys_fread(&fnw[0],fnwlen,1,FileHandle);
      
      if(isStrWEqual_CaseUnsence(FilenameW,fnw)==true){
        return(head[1]);
      }
      
      FileSys_fseek(FileHandle,ofs,SEEK_SET);
    }
  }
  
  return(0);
}

static void SkipChank(void)
{
  u32 len;
  
  FileSys_fread(&len,4,1,FileHandle);
  FileSys_fseek(FileHandle,len,SEEK_CUR);
}

#include "zlib/zlib.h"

// 返値:解凍済みデータサイズ(-1:error)
static inline int zlib_decompress(const u8 *compbuf,const u32 compsize,u8 *decompbuf,const u32 decompsize)
{
    z_stream z;                     /* ライブラリとやりとりするための構造体 */
    
    int status;

    /* すべてのメモリ管理をライブラリに任せる */
    z.zalloc = Z_NULL;
    z.zfree = Z_NULL;
    z.opaque = Z_NULL;

    /* 初期化 */
    if (inflateInit(&z) != Z_OK) {
        _consolePrintf("inflateInit: %s\n", (z.msg) ? z.msg : "???");
        return(-1);
    }

    z.next_in = (u8*)compbuf;
    z.avail_in = compsize;
    z.next_out = decompbuf;        /* 出力ポインタ */
    z.avail_out = decompsize;    /* 出力バッファのサイズ */

    while(1){
      status = inflate(&z, Z_NO_FLUSH); /* 展開 */
      if (status == Z_STREAM_END) break; /* 完了 */
      if (status != Z_OK) {   /* エラー */
        _consolePrintf("inflate: %s\n", (z.msg) ? z.msg : "???");
        return(-1);
      }
      if (z.avail_out == 0) { /* 出力バッファが尽きれば */
        _consolePrintf("deflate buffer overflow.");
        return(-1);
      }
    }
    
    u32 tmp;
    
    tmp=decompsize-z.avail_out;
    
    /* 後始末 */
    if (inflateEnd(&z) != Z_OK) {
        _consolePrintf("inflateEnd: %s\n", (z.msg) ? z.msg : "???");
        return(-1);
    }
    
    return(tmp);
}

static void* GetDeflateData(void)
{
  u8 *psrcdata,*pdstdata;
  u32 srcsize,dstsize;
  
  FileSys_fread(&srcsize,4,1,FileHandle);
  FileSys_fread(&dstsize,4,1,FileHandle);
  
//  _consolePrintf("src=%dbyte dst=%dbyte\n",srcsize,dstsize);
  
  srcsize-=4;
  psrcdata=(u8*)safemalloc(srcsize);
  if(psrcdata==NULL) return(NULL);
  
  FileSys_fread(psrcdata,1,srcsize,FileHandle);
  
  pdstdata=(u8*)safemalloc(dstsize);
  if(pdstdata==NULL){
    safefree(psrcdata); psrcdata=NULL;
    return(NULL);
  }
  
  {
    void *pchk=safemalloc(128*1024);
    if(pchk==NULL){
      safefree(psrcdata); psrcdata=NULL;
      safefree(pdstdata); pdstdata=NULL;
      return(NULL);
    }
    safefree(pchk); pchk=NULL;
  }
  
  zlib_decompress(psrcdata,srcsize,pdstdata,dstsize);
  
  safefree(psrcdata); psrcdata=NULL;
  
  return(pdstdata);
}

void thumbChangePath(void)
{
  ThumbDrawed=false;
  
  if(FileHandle!=0){
    FileSys_fclose(FileHandle);
    FileHandle=0;
  }
  
  if(GlobalINI.Thumbnail.Mode==EITM_Off) return;
  
  FileHandle=FileSys_fopen(SystemFileID_Thumbnail1);
  
  if(FileHandle==0){
    ThumbCount=0;
    ThumbDrawed=false;
    return;
  }
  
  FileSys_fseek(FileHandle,0,SEEK_SET);
  FileSys_fread(&ThumbCount,4,1,FileHandle);
}

void thumbReturnImage(void)
{
  if(ThumbDrawed==false) return;
  ThumbDrawed=false;
  
  MWin_AllTrans();
//  MemSet16DMA3(RGB15(0,0,0)|BIT15,pScreenMainOverlay->GetVRAMBuf(),256*192*2);
}

void thumbChangeCursorIndex(s32 idx)
{
  if(FileHandle==0) return;
  if(GlobalINI.Thumbnail.Mode==EITM_ThumbSelector) return;
  
  if(FileSys_GetFileType(idx)!=FT_File){
    thumbReturnImage();
    return;
  }
  
  const UnicodeChar *pUnicodeFilename=FileSys_GetFilename(idx);
  
  FileSys_fseek(FileHandle,0,SEEK_SET);
  FileSys_fread(&ThumbCount,4,1,FileHandle);
  
  u32 crc=GetWStrCRC32Fast(pUnicodeFilename);
  u32 ofs=GetOffset(crc,pUnicodeFilename);
  
//  _consolePrintf("alias=%s crc=%08x ofs=%d\n",FileSys_GetAlias(idx),crc,ofs);
  
  if(ofs==0){
    thumbReturnImage();
    return;
  }
  
  FileSys_fseek(FileHandle,ofs,SEEK_SET);
  
  SkipChank(); // skip fn
  SkipChank(); // skip img64
  
  u8 *pimg256;
  
  pimg256=(u8*)GetDeflateData();
  
  if(pimg256==NULL){
    thumbReturnImage();
    return;
  }
  
  u32 palcnt;
  u16 *ppal;
  
  ppal=(u16*)pimg256;
  palcnt=*ppal++;
  
  u8 *psrcbm=(u8*)&ppal[palcnt];
  u16 *pdstbm=pScreenMainOverlay->GetVRAMBuf();
  
//  _consolePrintf("palcnt=%d\n",palcnt);
  
  switch(palcnt){
    case 16: {
      for(u32 idx=0;idx<(256/2)*192;idx++){
        u8 data=psrcbm[idx];
        pdstbm[idx*2+0]=ppal[data>>4];
        pdstbm[idx*2+1]=ppal[data&0x0f];
      }
    } break;
    case 256: {
      for(u32 idx=0;idx<256*192;idx++){
        pdstbm[idx]=ppal[psrcbm[idx]];
      }
    } break;
  }
  
  safefree(pimg256); pimg256=NULL;
  
  ThumbDrawed=true;
}

u16* thumbGetImage64(s32 idx)
{
  if(FileHandle==0) return(NULL);
  if(GlobalINI.Thumbnail.Mode==EITM_FullscreenPreview) return(NULL);
  
  if(FileSys_GetFileType(idx)!=FT_File){
    return(NULL);
  }
  
  UnicodeChar* pUnicodeFilename=FileSys_GetFilename(idx);
  
  FileSys_fseek(FileHandle,0,SEEK_SET);
  FileSys_fread(&ThumbCount,4,1,FileHandle);
  
  u32 crc=GetWStrCRC32Fast(pUnicodeFilename);
  u32 ofs=GetOffset(crc,pUnicodeFilename);
  
//  _consolePrintf("alias=%s crc=%08x ofs=%d\n",FileSys_GetAlias(idx),crc,ofs);
  
  if(ofs==0){
    return(NULL);
  }
  
  FileSys_fseek(FileHandle,ofs,SEEK_SET);
  
  SkipChank(); // skip fn
  
  u8 *pimg64;
  
  pimg64=(u8*)GetDeflateData();
  
  if(pimg64==NULL){
    return(NULL);
  }
  
  u16 *pdstbm=(u16*)safemalloc(64*48*2);
  
  u32 palcnt;
  u16 *ppal;
  
  ppal=(u16*)pimg64;
  palcnt=*ppal++;
  
  u8 *psrcbm=(u8*)&ppal[palcnt];
  
//  _consolePrintf("palcnt=%d\n",palcnt);
  
  switch(palcnt){
    case 16: {
      for(u32 idx=0;idx<(64/2)*48;idx++){
        u8 data=psrcbm[idx];
        pdstbm[idx*2+0]=ppal[data>>4];
        pdstbm[idx*2+1]=ppal[data&0x0f];
      }
    } break;
    case 256: {
      for(u32 idx=0;idx<64*48;idx++){
        pdstbm[idx]=ppal[psrcbm[idx]];
      }
    } break;
  }
  
  safefree(pimg64); pimg64=NULL;
  
  return(pdstbm);
}

bool thumbExists(void)
{
  if(FileHandle==0){
    return(false);
    }else{
    if(GlobalINI.Thumbnail.Mode==EITM_FullscreenPreview) return(false);
    return(true);
  }
}

bool thumbGetDrawed(void)
{
  return(ThumbDrawed);
}

